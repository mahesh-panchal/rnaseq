/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//
// General configuration options
//

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'NFCORE_RNASEQ:RNASEQ:INPUT_CHECK:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

    //
    // Genome preparation options
    //

    withName: 'GUNZIP_.*|RSEM_PREPAREREFERENCE_TRANSCRIPTS' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'UNTAR_.*' {
        ext.args2 = '--no-same-owner'
    }

    withName: 'UNTAR_.*|STAR_GENOMEGENERATE|HISAT2_BUILD' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: GFFREAD {
        ext.args   = '--keep-exon-attrs -F -T'
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: HISAT2_EXTRACTSPLICESITES {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: SALMON_INDEX {
        ext.args   = params.gencode ? '--gencode' : ''
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: RSEM_PREPAREREFERENCE {
        ext.args   = '--star'
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: GTF2BED {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: CAT_ADDITIONAL_FASTA {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: GTF_GENE_FILTER {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: GET_CHROM_SIZES {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: CAT_FASTQ {
        publishDir = [
            path: { "${params.outdir}/fastq" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_merged_fastq
        ]
    }

    withName: '.*:PREPARE_GENOME:BBMAP_BBSPLIT' {
        ext.args   = 'build=1'
        ext.when   = !params.skip_bbsplit && params.bbsplit_fasta_list
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    //
    // Read QC and trimming options
    //

    withName: '.*:FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
        ext.args   = '--quiet'
        ext.when   = !(params.skip_fastqc || params.skip_qc)
    }

    withName: '.*:FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
        ext.args   = [
            '--fastqc',
            params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
        ].join(' ').trim()
        ext.when   = !params.skip_trimming
        publishDir = [
            [
                path: { "${params.outdir}/trimgalore/fastqc" },
                mode: 'copy',
                pattern: "*.{html,zip}"
            ],
            [
                path: { "${params.outdir}/trimgalore" },
                mode: 'copy',
                pattern: "*.fq.gz",
                enabled: params.save_trimmed
            ],
            [
                path: { "${params.outdir}/trimgalore" },
                mode: 'copy',
                pattern: "*.txt"
            ]
        ]
    }

    withName: '.*:FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT' {
        ext.args   = [
                params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
                params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
            ].join(' ').trim()
        ext.when   = params.with_umi
        publishDir = [
            [
                path: { "${params.outdir}/umitools" },
                mode: 'copy',
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/umitools" },
                mode: 'copy',
                pattern: "*.fastq.gz",
                enabled: params.save_umi_intermeds
            ]
        ]
    }

    //
    // Contaminant removal options
    //

    withName: 'NFCORE_RNASEQ:RNASEQ:BBMAP_BBSPLIT' {
        ext.args   = 'build=1 ambiguous2=all maxindel=150000'
        ext.when   = !params.skip_bbsplit
        publishDir = [
            [
                path: { "${params.outdir}/bbsplit" },
                mode: 'copy',
                pattern: '*.txt'
            ],
            [
                path: { "${params.outdir}/bbsplit" },
                mode: 'copy',
                pattern: '*.fastq.gz',
                enabled: params.save_bbsplit_reads
            ]
        ]
    }

    withName: SORTMERNA {
        ext.args   = '--num_alignments 1 --fastx -v'
        ext.when   = params.remove_ribo_rna
        publishDir = [
            [
                path: { "${params.outdir}/sortmerna" },
                mode: 'copy',
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/sortmerna" },
                mode: 'copy',
                pattern: "*.fastq.gz",
                enabled: params.save_non_ribo_reads
            ]
        ]
    }

    //
    // General alignment options
    //

    withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
        ext.when   = !params.skip_alignment
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/samtools_stats" },
            mode: 'copy',
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }

    withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.sorted" }
        ext.when   = !params.skip_alignment
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            mode: 'copy',
            pattern: "*.bam",
            enabled: ( ['star_salmon','hisat2'].contains(params.aligner) &&
                ( params.save_align_intermeds ||
                    ( !params.with_umi && params.skip_markduplicates )
                )
            ) || params.save_align_intermeds || params.skip_markduplicates
        ]
    }

    withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.args   = params.bam_csi_index ? '-c' : ''
        ext.when   = !params.skip_alignment
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            mode: 'copy',
            pattern: "*.{bam,csi}",
            enabled: ( ['star_salmon','hisat2'].contains(params.aligner) &&
                ( params.save_align_intermeds ||
                    ( !params.with_umi && params.skip_markduplicates )
                )
            ) || params.save_align_intermeds || params.skip_markduplicates
        ]
    }

    withName: '.*:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
        ext.args   = 'ASSUME_SORTED=true REMOVE_DUPLICATES=false VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
        ext.prefix = { "${meta.id}.markdup.sorted" }
        ext.when   = !params.skip_alignment && !params.skip_markduplicates
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/picard_metrics" },
                mode: 'copy',
                pattern: '*metrics.txt'
            ],
            [
                path: { "${params.outdir}/${params.aligner}" },
                mode: 'copy',
                pattern: '*.bam'
            ]
        ]
    }

    withName: '.*:MARK_DUPLICATES_PICARD:SAMTOOLS_INDEX' {
        ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix = { "${meta.id}.markdup.sorted" }
        ext.when   = !params.skip_alignment && !params.skip_markduplicates
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            mode: 'copy',
            pattern: '*.{bai,csi}'
        ]
    }

    withName: '.*:MARK_DUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
        ext.when   = !params.skip_alignment && !params.skip_markduplicates
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/samtools_stats" },
            mode: 'copy',
            pattern: '*.{stats,flagstat,idxstats}'
        ]
    }

    withName: '.*:DEDUP_UMI_UMITOOLS_GENOME:UMITOOLS_DEDUP' {
        ext.prefix = { "${meta.id}.umi_dedup.sorted" }
        ext.when   = !params.skip_alignment && params.with_umi && ['star_salmon','hisat2'].contains(params.aligner)
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/umitools" },
                mode: 'copy',
                pattern: '*.tsv'
            ],
            [
                path: { "${params.outdir}/${params.aligner}" },
                mode: 'copy',
                pattern: '*.bam',
                enabled: (
                    params.save_align_intermeds ||
                    params.skip_markduplicates ||
                    params.save_umi_intermeds
                )
            ]
        ]
    }

    withName: '.*:DEDUP_UMI_UMITOOLS_GENOME:SAMTOOLS_INDEX' {
        ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix = { "${meta.id}.umi_dedup.sorted" }
        ext.when   = !params.skip_alignment && params.with_umi && ['star_salmon','hisat2'].contains(params.aligner)
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            mode: 'copy',
            pattern: '*.{bai,csi}',
            enabled: (
                params.save_align_intermeds ||
                params.skip_markduplicates ||
                params.save_umi_intermeds
            )
        ]
    }

    withName: '.*:DEDUP_UMI_UMITOOLS_GENOME:BAM_STATS_SAMTOOLS:.*' {
        ext.when   = !params.skip_alignment && params.with_umi && ['star_salmon','hisat2'].contains(params.aligner)
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/samtools_stats" },
            mode: 'copy',
            pattern: '*.{stats,flagstat,idxstats}'
        ]
    }

    withName: BEDTOOLS_GENOMECOV {
        ext.args   = '-split -du'
        ext.when   = !params.skip_alignment && !params.skip_bigwig
        publishDir = [
            path: { "${params.outdir}/bedtools/${meta.id}" },
            enabled: false
        ]
    }

    withName: '.*:BEDGRAPH_TO_BIGWIG_FORWARD:UCSC_BEDCLIP' {
        ext.prefix = { "${meta.id}.clip.forward" }
        ext.when   = !params.skip_alignment && !params.skip_bigwig
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            enabled: false
        ]
    }

    withName: '.*:BEDGRAPH_TO_BIGWIG_FORWARD:UCSC_BEDGRAPHTOBIGWIG' {
        ext.prefix = { "${meta.id}.forward" }
        ext.when   = !params.skip_alignment && !params.skip_bigwig
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/bigwig" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:BEDGRAPH_TO_BIGWIG_REVERSE:UCSC_BEDCLIP' {
        ext.prefix = { "${meta.id}.clip.reverse" }
        ext.when   = !params.skip_alignment && !params.skip_bigwig
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            enabled: false
        ]
    }

    withName: '.*:BEDGRAPH_TO_BIGWIG_REVERSE:UCSC_BEDGRAPHTOBIGWIG' {
        ext.prefix = { "${meta.id}.reverse" }
        ext.when   = !params.skip_alignment && !params.skip_bigwig
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/bigwig" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: STRINGTIE {
        ext.args   = [
            '-v',
            params.stringtie_ignore_gtf ? '' : '-e'
        ].join(' ').trim()
        ext.when   = !params.skip_alignment && !params.skip_stringtie
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/stringtie" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MULTIQC_TSV_FAIL_MAPPED {
        ext.when   = !params.skip_alignment && params.aligner.contains('star')
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            enabled: false
        ]
    }

    //
    // STAR Salmon alignment options
    //

    withName: '.*:ALIGN_STAR:STAR_ALIGN' {
        ext.args   = [
            '--quantMode TranscriptomeSAM',
            '--twopassMode Basic',
            '--outSAMtype BAM Unsorted',
            '--readFilesCommand zcat',
            '--runRNGseed 0',
            '--outFilterMultimapNmax 20',
            '--alignSJDBoverhangMin 1',
            '--outSAMattributes NH HI AS NM MD',
            '--quantTranscriptomeBan Singleend',
            params.save_unaligned ? '--outReadsUnmapped Fastx' : ''
        ].join(' ').trim()
        ext.when   = !params.skip_alignment && params.aligner == 'star_salmon'
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/log" },
                mode: 'copy',
                pattern: '*.{out,tab}'
            ],
            [
                path: { "${params.outdir}/${params.aligner}" },
                mode: 'copy',
                pattern: '*.bam',
                enabled: params.save_align_intermeds
            ],
            [
                path: { "${params.outdir}/${params.aligner}/unmapped" },
                mode: 'copy',
                pattern: '*.fastq.gz',
                enabled: params.save_unaligned
            ]
        ]
    }

    withName: '.*:QUANTIFY_STAR_SALMON:SALMON_QUANT' {
        ext.when   = !params.skip_alignment && params.aligner == 'star_salmon'
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:QUANTIFY_STAR_SALMON:SALMON_TX2GENE' {
        ext.when   = !params.skip_alignment && params.aligner == 'star_salmon'
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:QUANTIFY_STAR_SALMON:SALMON_TXIMPORT' {
        ext.when   = !params.skip_alignment && params.aligner == 'star_salmon'
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:QUANTIFY_STAR_SALMON:SALMON_SE_.*' {
        ext.when   = !params.skip_alignment && params.aligner == 'star_salmon'
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NFCORE_RNASEQ:RNASEQ:SAMTOOLS_SORT' {
        ext.args   = '-n'
        ext.prefix = { "${meta.id}.umi_dedup.transcriptome" }
        ext.when   = !params.skip_alignment && params.aligner == 'star_salmon' && params.with_umi
        publishDir = [
            path: { "${params.outdir}/samtools" },
            enabled: false
        ]
    }

    withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.transcriptome.sorted" }
        ext.when   = !params.skip_alignment && params.aligner == 'star_salmon' && params.with_umi
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            enabled: false
        ]
    }

    withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.when   = !params.skip_alignment && params.aligner == 'star_salmon' && params.with_umi
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            enabled: false
        ]
    }

    withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
        ext.when   = !params.skip_alignment && params.aligner == 'star_salmon' && params.with_umi
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            enabled: false
        ]
    }

    withName: '.*:DEDUP_UMI_UMITOOLS_TRANSCRIPTOME:UMITOOLS_DEDUP' {
        ext.prefix = { "${meta.id}.umi_dedup.transcriptome.sorted" }
        ext.when   = !params.skip_alignment && params.aligner == 'star_salmon' && params.with_umi
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/umitools" },
            mode: 'copy',
            pattern: '*.tsv'
        ]
    }

    withName: '.*:DEDUP_UMI_UMITOOLS_TRANSCRIPTOME:SAMTOOLS_INDEX' {
        ext.when   = !params.skip_alignment && params.aligner == 'star_salmon' && params.with_umi
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            enabled: false
        ]
    }

    withName: '.*:DEDUP_UMI_UMITOOLS_TRANSCRIPTOME:BAM_STATS_SAMTOOLS:.*' {
        ext.when   = !params.skip_alignment && params.aligner == 'star_salmon' && params.with_umi
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/samtools_stats" },
            mode: 'copy',
            pattern: '*.{stats,flagstat,idxstats}'
        ]
    }

    withName: DESEQ2_QC_STAR_SALMON {
        ext.args   = [
            "--id_col 1",
            "--sample_suffix ''",
            "--outprefix deseq2",
            "--count_col 3",
            params.deseq2_vst ? '--vst TRUE' : ''
        ].join(' ').trim()
        ext.args2  = 'star_salmon'
        ext.when   = !params.skip_alignment && params.aligner == 'star_salmon' && !params.skip_qc & !params.skip_deseq2_qc
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/deseq2_qc" },
            mode: 'copy',
            pattern: "*{RData,pca.vals.txt,plots.pdf,sample.dists.txt,size_factors,log}"
        ]
    }

    //
    // STAR RSEM alignment options
    //

    withName: '.*:QUANTIFY_RSEM:RSEM_CALCULATEEXPRESSION' {
        ext.args   = [
            '--star',
            '--star-output-genome-bam',
            '--star-gzipped-read-file',
            '--estimate-rspd',
            '--seed 1'
        ].join(' ').trim()
        ext.when   = !params.skip_alignment && params.aligner == 'star_rsem'
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}" },
                mode: 'copy',
                pattern: "*.{stat,results}"
            ],
            [
                path: { "${params.outdir}/${params.aligner}" },
                mode: 'copy',
                pattern: "*.bam",
                enabled: params.save_align_intermeds
            ],
            [
                path: { "${params.outdir}/${params.aligner}/log" },
                mode: 'copy',
                pattern: "*.log"
            ]
        ]
    }

    withName: '.*:QUANTIFY_RSEM:RSEM_MERGE_COUNTS' {
        ext.when   = !params.skip_alignment && params.aligner == 'star_rsem'
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DESEQ2_QC_RSEM {
        ext.args   = [
            "--id_col 1",
            "--sample_suffix ''",
            "--outprefix deseq2",
            "--count_col 3",
            params.deseq2_vst ? '--vst TRUE' : ''
        ].join(' ').trim()
        ext.args2  = 'star_rsem'
        ext.when   = !params.skip_alignment && params.aligner == 'star_rsem' && !params.skip_qc & !params.skip_deseq2_qc
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/deseq2_qc" },
            mode: 'copy',
            pattern: "*{RData,pca.vals.txt,plots.pdf,sample.dists.txt,size_factors,log}"
        ]
    }

    //
    // HISAT2 alignment options
    //

    withName: '.*:ALIGN_HISAT2:HISAT2_ALIGN' {
        ext.args   = '--met-stderr --new-summary --dta'
        ext.when   = !params.skip_alignment && params.aligner == 'hisat2'
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/log" },
                mode: 'copy',
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/${params.aligner}" },
                mode: 'copy',
                pattern: '*.bam',
                enabled: params.save_align_intermeds
            ],
            [
                path: { "${params.outdir}/${params.aligner}/unmapped" },
                mode: 'copy',
                pattern: '*.fastq.gz',
                enabled: params.save_unaligned
            ]
        ]
    }

    //
    // Post-alignment QC options
    //

    withName: PRESEQ_LCEXTRAP {
        ext.args   = '-verbose -bam -seed 1 -seg_len 100000000'
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_preseq
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/preseq" },
                mode: 'copy',
                pattern: "*.txt"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/preseq/log" },
                mode: 'copy',
                pattern: "*.log"
            ]
        ]
    }

    withName: QUALIMAP_RNASEQ {
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_qualimap
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/qualimap" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DUPRADAR {
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_dupradar
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/dupradar/scatter_plot" },
                mode: 'copy',
                pattern: "*Dens.pdf"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/dupradar/box_plot" },
                mode: 'copy',
                pattern: "*Boxplot.pdf"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/dupradar/histogram" },
                mode: 'copy',
                pattern: "*Hist.pdf"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/dupradar/gene_data" },
                mode: 'copy',
                pattern: "*Matrix.txt"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/dupradar/intercepts_slope" },
                mode: 'copy',
                pattern: "*slope.txt"
            ]
        ]
    }

    withName: SUBREAD_FEATURECOUNTS {
        ext.args   = [
            '-B -C',
            params.gencode ? "-g gene_type" : "-g $params.featurecounts_group_type",
            "-t $params.featurecounts_feature_type"
        ].join(' ').trim()
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_biotype_qc && params.featurecounts_group_type
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/featurecounts" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MULTIQC_CUSTOM_BIOTYPE {
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_biotype_qc && params.featurecounts_group_type
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/featurecounts" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:RSEQC:RSEQC_BAMSTAT' {
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_rseqc && params.rseqc_modules
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/rseqc/bam_stat" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:RSEQC:RSEQC_INFEREXPERIMENT' {
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_rseqc && params.rseqc_modules
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/rseqc/infer_experiment" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:RSEQC:RSEQC_JUNCTIONANNOTATION' {
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_rseqc && params.rseqc_modules
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/rseqc/junction_annotation/pdf" },
                mode: 'copy',
                pattern: '*.pdf'
            ],
            [
                path: { "${params.outdir}/${params.aligner}/rseqc/junction_annotation/bed" },
                mode: 'copy',
                pattern: '*.bed'
            ],
            [
                path: { "${params.outdir}/${params.aligner}/rseqc/junction_annotation/xls" },
                mode: 'copy',
                pattern: '*.xls'
            ],
            [
                path: { "${params.outdir}/${params.aligner}/rseqc/junction_annotation/log" },
                mode: 'copy',
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/${params.aligner}/rseqc/junction_annotation/rscript" },
                mode: 'copy',
                pattern: '*.r'
            ]
        ]
    }

    withName: '.*:RSEQC:RSEQC_JUNCTIONSATURATION' {
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_rseqc && params.rseqc_modules
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/rseqc/junction_saturation/pdf" },
                mode: 'copy',
                pattern: '*.pdf'
            ],
            [
                path: { "${params.outdir}/${params.aligner}/rseqc/junction_saturation/rscript" },
                mode: 'copy',
                pattern: '*.r'
            ]
        ]
    }

    withName: '.*:RSEQC:RSEQC_READDUPLICATION' {
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_rseqc && params.rseqc_modules
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/rseqc/read_duplication/pdf" },
                mode: 'copy',
                pattern: '*.pdf'
            ],
            [
                path: { "${params.outdir}/${params.aligner}/rseqc/read_duplication/xls" },
                mode: 'copy',
                pattern: '*.xls'
            ],
            [
                path: { "${params.outdir}/${params.aligner}/rseqc/read_duplication/rscript" },
                mode: 'copy',
                pattern: '*.r'
            ]
        ]
    }

    withName: '.*:RSEQC:RSEQC_READDISTRIBUTION' {
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_rseqc && params.rseqc_modules && !params.bam_csi_index
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/rseqc/read_distribution" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:RSEQC:RSEQC_INNERDISTANCE' {
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_rseqc && params.rseqc_modules && !params.bam_csi_index
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/rseqc/inner_distance/txt" },
                mode: 'copy',
                pattern: '*.txt',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/${params.aligner}/rseqc/inner_distance/pdf" },
                mode: 'copy',
                pattern: '*.pdf'
            ],
            [
                path: { "${params.outdir}/${params.aligner}/rseqc/inner_distance/rscript" },
                mode: 'copy',
                pattern: '*.r'
            ]
        ]
    }

    withName: '.*:RSEQC:RSEQC_TIN' {
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_rseqc && params.rseqc_modules && !params.bam_csi_index
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/rseqc/tin" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MULTIQC_TSV_STRAND_CHECK {
        ext.when   = !params.skip_alignment && !params.skip_qc && !params.skip_rseqc && params.rseqc_modules
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            enabled: false
        ]
    }

    withName: MULTIQC {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        ext.when   = !params.skip_multiqc
        publishDir = [
            path: { [
                "${params.outdir}/multiqc",
                params.skip_alignment? '' : "/${params.aligner}"
                ].join('') },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // Salmon pseudo-alignment options
    //

    withName: '.*:QUANTIFY_SALMON:SALMON_QUANT' {
        ext.when   = params.pseudo_aligner == 'salmon'
        publishDir = [
            path: { "${params.outdir}/${params.pseudo_aligner}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:QUANTIFY_SALMON:SALMON_TX2GENE' {
        ext.when   = params.pseudo_aligner == 'salmon'
        publishDir = [
            path: { "${params.outdir}/${params.pseudo_aligner}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:QUANTIFY_SALMON:SALMON_TXIMPORT' {
        ext.when   = params.pseudo_aligner == 'salmon'
        publishDir = [
            path: { "${params.outdir}/${params.pseudo_aligner}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:QUANTIFY_SALMON:SALMON_SE_.*' {
        ext.when   = params.pseudo_aligner == 'salmon'
        publishDir = [
            path: { "${params.outdir}/${params.pseudo_aligner}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DESEQ2_QC_SALMON {
        ext.args   = [
            "--id_col 1",
            "--sample_suffix ''",
            "--outprefix deseq2",
            "--count_col 3",
            params.deseq2_vst ? '--vst TRUE' : ''
        ].join(' ').trim()
        ext.args2  = 'salmon'
        ext.when   = params.pseudo_aligner == 'salmon' && !params.skip_qc & !params.skip_deseq2_qc
        publishDir = [
            path: { "${params.outdir}/${params.pseudo_aligner}/deseq2_qc" },
            mode: 'copy',
            pattern: "*{RData,pca.vals.txt,plots.pdf,sample.dists.txt,size_factors,log}"
        ]
    }
}
